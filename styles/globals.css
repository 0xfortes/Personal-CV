@tailwind base;
/* Imports Tailwind's base styles, which include CSS reset and default styles for HTML elements */

@tailwind components;
/* Imports Tailwind's component classes, which are pre-defined utility combinations */

@tailwind utilities;
/* Imports Tailwind's utility classes, which are single-purpose classes for styling */

:root {
  --foreground-rgb: 255, 255, 255;
  /* Defines a CSS custom property for foreground color (white) */
  --background-start-rgb: 0, 0, 0;
  /* Defines a CSS custom property for background start color (black) */
  --background-end-rgb: 0, 0, 0;
  /* Defines a CSS custom property for background end color (black) */
}

body {
  color: rgb(var(--foreground-rgb));
  /* Sets the text color of the body to white using the custom property */
  background: transparent;
  /* Sets the background of the body to transparent */
}

@layer utilities {
  /* Defines custom utility classes within Tailwind's utilities layer */
  .transition-all {
    transition-property: all;
    /* Applies transition to all properties */
  }
  
  .duration-300 {
    transition-duration: 300ms;
    /* Sets transition duration to 300 milliseconds */
  }
  
  .duration-500 {
    transition-duration: 500ms;
    /* Sets transition duration to 500 milliseconds */
  }
  
  .duration-1000 {
    transition-duration: 1000ms;
    /* Sets transition duration to 1000 milliseconds */
  }
  
  .ease-in-out {
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    /* Sets transition timing function to ease-in-out */
  }
}

.animate-drop {
  animation: drop 1s ease-out forwards;
  /* Applies the 'drop' animation to elements with this class */
}

.translate-y-\[-100\%\] {
  transform: translateY(-100%);
  /* Moves an element up by 100% of its height */
}

@keyframes drop {
  /* Defines the 'drop' animation */
  0% {
    transform: translateY(-100%);
    opacity: 0;
    /* Start position: moved up, fully transparent */
  }
  100% {
    transform: translateY(0);
    opacity: 1;
    /* End position: fully opaque */
  }
}


#tsparticles {
  position: fixed;
  /* Fixes the position of the particle container */
  width: 100%;
  height: 100%;
  /* Makes the particle container full-width and full-height */
  top: 0;
  left: 0;
  /* Positions the container at the top-left corner */
  margin: 0;
  padding: 0;
  /* Removes any margin or padding */
  z-index: -1;
  /* Places the particle container behind other content */
}

html {
  scroll-behavior: smooth;
}

.custom-scrollbar {
  scrollbar-width: thin;
  scrollbar-color: rgba(255, 255, 255, 0.3) transparent;
}

.custom-scrollbar::-webkit-scrollbar {
  width: 6px;
}

.custom-scrollbar::-webkit-scrollbar-track {
  background: transparent;
}

.custom-scrollbar::-webkit-scrollbar-thumb {
  background-color: rgba(255, 255, 255, 0.3);
  border-radius: 3px;
  border: transparent;
}

.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background-color: rgba(255, 255, 255, 0.5);
}

@layer base {
  html {
    font-family: 'Roboto', sans-serif;
  }
}

button:focus {
  outline: none;
}

.text-glow {
  text-shadow: 0 0 4px rgba(255, 255, 255, 0.6), 0 0 8px rgba(255, 255, 255, 0.4), 0 0 12px rgba(255, 255, 255, 0.2);
}

